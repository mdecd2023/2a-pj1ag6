<h1>About</h1>
<p><strong>第六組</strong></p>
<p>組長: 41023104 呂佳柔 ， 組員：41023112 王啟騰</p>
<p>網頁 <a href="https://mdecd2023.github.io/2a-pj1ag6/content/index.html">https://mdecd2023.github.io/2a-pj1ag6/content/index.html</a> </p>
<p>倉儲 <a href="https://github.com/mdecd2023/2a-pj1ag6">https://github.com/mdecd2023/2a-pj1ag6</a> </p>
<h1>Schedule</h1>
<p>week1 加入 teams 課程，建立 resume-github 帳號倉儲，分組協同專案 2a-pj1agx</p>
<p>week2 228連假</p>
<p>week3 建立靜態網站</p>
<p>week4 b<span>ubbleRub tutorial 製作</span></p>
<p><span>week5 建立Tcexam考試帳號，使用 latex 範本開始製作專題報告</span></p>
<p>week6 <span>Tcexam 小考，建立 pj1 統整協同作業</span></p>
<p><span>week7 清明連假</span></p>
<p>week8 <span>Tcexam 小考，準備下周專題報告</span></p><h1>w3</h1>
<p>w3 - 2023.03.10.16 已經完成分組網頁者，可以得到分組網頁評分</p>
<p>w3 - 請各組寫一個程式判定 2a 哪一組已經完成網頁建置.</p>
<p>w3 開始執行<span> </span><a href="https://mde.tw/pjcopsim/content/bubbleRobTutorial.html">https://mde.tw/pjcopsim/content/bubbleRobTutorial.html</a></p>
<p>星期四補課時間， 要驗收 Tutorial1 (心得，展示頁面說明各組員所完成項目，說明該組的專案規劃)</p>
<p>甲班Github帳號 <a href="https://gist.githubusercontent.com/CHIA-ROU/8ea54ac07955a6b26b63e343c17f3097/raw/1e6977f5e593f374f6545cc5282c01277674e97e/2a.txt">2a.txt</a></p>
<h1>CoppeliaSim-note</h1>
<p><strong>1.在泡泡球機器人中使用何種程式碼?</strong></p>
<p>Lua語言。由巴西里約熱內盧天主教大學的一個研究團隊所開發，使用了 V-REP 仿真軟件中的 API ，是一種輕量級、高效、可擴展的腳本語言，被廣泛用於遊戲開發、嵌入式系統、Web應用、科學計算等領域。</p>
<p><b><span><img alt="" height="211" src="/images/Lua.png" width="744"/></span></b></p>
<p><b>2.這段 Lua 程式碼中哪一行是控制泡泡球機器人運行的間距 ?</b></p>
<p>第18行中 clearance 為間隙，單位是 meter 公尺。</p>
<p></p>
<p><b><img alt="" height="143" src="/images/間距.png" width="1062"/></b></p>
<p><b>3..在 CoppeliaSim 中，scene 與 model 有何不同 ?</b></p>
<p>兩者都是表示場景中的物體，但一個 scene 中可以有多個 model ，一個 model 卻只屬於一個 scene。</p>
<p>scene 通常代表模擬仿真場景，例如：燈光、物體、傳感器、環境等等。</p>
<p>model 代表單獨一個物體，例如：機器人、物體、傳感器等等，通常包含自身的屬性、位置、旋轉、網格模型等等特性。</p>
<p><b><img alt="" height="351" src="/images/scene model .png" width="744"/></b></p>
<p><b>4..在 CoppeliaSim scene 中，何謂 clean model ?</b></p>
<p>clean model 是一個工具，可以刪除未使用的對象和場景元素，壓縮模型文件大小，將模型的場景數據進行優化和精簡，從而提高模擬效率。在 CoppeliaSim 中通過點擊 File &gt; Clean Model 打開 Clean Model 工具。</p>
<p><img alt="" height="352" src="/images/scene model .png" width="746"/></p>
<p><b>5..CoppeliaSim 的 .ttt 檔案格式與 .simscene.xml 檔案格式有何不同 ?</b></p>
<p>.ttt檔案格式：CoppeliaSim 的原始檔案格式，<span>包含了 CoppeliaSim 環境中的所有內容，包括場景、物體、燈光、相機、機器人、腳本等等。</span></p>
<p>1.<span>用於保存完整的 CoppeliaSim 模擬場景</span></p>
<p>2.<span>可以在不同的 CoppeliaSim 版本之間進行互相轉換</span></p>
<p><span>3.由於是二進制格式，因此不太容易進行版本控制和合併等操作</span></p>
<p><span>.simscene.xml檔案格式：</span><span>CoppeliaSim 的場景文件格式，包含了 CoppeliaSim 環境中的場景和物體，不包括其他元素如腳本和機器人等。</span></p>
<p><span>1.用於保存和分享 CoppeliaSim 的場景和模型</span></p>
<p><span>2.可以輕鬆進行版本控制和合併等操作</span></p>
<p><span>3.不支持保存和加載腳本和機器人等元素</span></p>
<p><span><img alt="" height="436" src="/images/.ttt .xml.png" width="753"/></span></p><h1>Projects</h1>
<p>課程內容</p><h2>Dynamic site</h2>
<ol>
<li>
<p class="_04xlpA direction-ltr align-start para-style-body"><span class="S1PPyQ">下載 portable_python 以 startIpv6 開啟小黑窗，變更到需要的資料夾</span><span class="S1PPyQ">(後退cd..，更換資料夾:，結束ctrl c)</span></p>
</li>
<li><span class="S1PPyQ">輸入 git clone https://github.com/mdecycu/cmsimde.git <span>作為倉儲的 cmsimde 目錄</span></span></li>
<li><span class="S1PPyQ">輸入 git clone https://github.com/mdecd2023/2a-pj1agx.git 克隆github自己組別空白倉儲</span></li>
<li>
<p class="_04xlpA direction-ltr align-start para-style-body"><span>從 up_dir 取出所有檔案放入 2a-pj1agx 倉儲的根目錄，可以 cms 啟動 dynamic site</span></p>
<p class="_04xlpA direction-ltr align-start para-style-body"><span class="S1PPyQ"></span></p>
</li>
<li>建立 token <span>放入 .git/config 中的 URL﹑加上@，就可直接在動態網頁中進行改版</span></li>
<li><span>以 generate_pages 轉為靜態後, 直接以 acp 進行 git add, commit 與 push</span></li>
</ol>
<h2>Portable Python</h2>
<p>自製 Portable Python 流程 (可以隨身, 可以啟動不同權限, 可以配置不同模組)</p>
<script>
var winkVideoData_40923151 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923151" height="630" muted="true" width="1008">
<source src="/downloads/how to create python portable.mp4" type="video/mp4"/></video></div>
<h2>Wink3</h2>
<div>動態頁面嵌入 Wink 影片的 html</div>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script&gt;// &lt;![CDATA[
var winkVideoData_40923151 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
// ]]&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video width="1008" height="630" autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923151" muted="true"&gt;
&lt;source src="/downloads/w10_cube.mp4" type="video/mp4" /&gt;&lt;/video&gt;&lt;/div&gt;</pre>
<p>以下為示範影片</p>
<script>
var winkVideoData_40923151 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923151" height="630" muted="true" width="1008">
<source src="/downloads/wink3 video.mp4" type="video/mp4"/></video></div>
<h2>SciTE</h2>
<p>在 week6 時於 SciTE 執行 simpleTest_19997.py，發現 CoppeliaSim 文字區並未顯示"這個 Python remote API 將會連續執行 1 秒鐘, 歡迎進入 CoppeliaSim 的虛擬世界!"，且該文字在 SciTE 中顯示為亂碼</p>
<p>解決方法:</p>
<p><span>由於 SciTE 預設似乎是採用西方語言編碼的，會把一中文字元視為兩個單位元組字元，才會呈現亂碼。</span></p>
<p>SciTE -&gt; Option -&gt; Open User Options File。在裡面新增：</p>
<p><span style="background-color: #ffff99;">code.page=65001</span></p>
<p><span style="background-color: #ffff99;">output.code.page=65001</span></p>
<p>save</p>
<h1>Git</h1>
<p><span style="background-color: #ffff99;"><strong>同步倉儲</strong></span></p>
<p><code>git pull</code><span> 命令用於從遠端倉儲更新本地倉儲，並自動執行 </span><code>git merge</code><span> 合併本地分支與遠端分支的變更。</span></p>
<p>1. git add . ：<span>將當前目錄下所有變更的文件添加到 Git 暫存區（stage area）中，以便在下一次提交時包含這些變更。</span></p>
<p>2. git commit -m "message" (message裡輸入提交的內容)：<span>編寫一個簡短的提交訊息，描述本次提交所做的變更，方便其他人閱讀和理解。</span></p>
<p>3. git pull ：<span>將遠端倉儲的最新版本下載到本地倉儲。</span></p>
<p>4. cms：開啟動態檢查是否同步。</p>
<p>*執行 <code>git pull</code> 命令之前，確保當前分支沒有未提交的變更，否則 <code>git pull</code> 命令可能會失敗。如果需要保存當前分支的未提交變更，可以使用 <code>git stash</code> 命令暫存變更，等到 <code>git pull</code> 命令完成後再使用 <code>git stash apply</code> 命令恢復變更。</p>
<p>git push 命令用於<span>將本地倉庫中的變更推送到遠端倉庫中，執行之前之前先確保本地分支和遠端分支是同步的。</span></p>
<p>*解決合併衝突</p>
<p><code><span face="Verdana, Arial, Helvetica, sans-serif" style="font-family: Verdana, Arial, Helvetica, sans-serif;">1. </span>git status</code> 命令查看存在衝突的文件，手動編輯文件，解決衝突。</p>
<p>2. <code>git add</code> 和 <code>git commit</code> 命令提交變更。</p><h1>tutorial1</h1>
<p><a href="/downloads/bubbleRob.xml">bubbleRob圖檔</a></p>
<p>以CoppeliaSim模擬兩球碰撞</p>
<script>
var winkVideoData_40923151 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923151" height="630" muted="true" width="1008">
<source src="/downloads/泡泡球作業一.mp4" type="video/mp4"/></video></div>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/TsbSoQ1ARdk" title="YouTube video player" width="560"></iframe></p>
<p>BubbleRob</p>
<script>
var winkVideoData_40923152 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923152" height="630" muted="true" width="1008">
<source src="/downloads/bubblerob-1.mp4" type="video/mp4"/></video></div>
<p>附在bubbleRob身體上的接近傳感器</p>
<script>
var winkVideoData_40923153 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923153" height="630" muted="true" width="1008">
<source src="/downloads/bubblerob-joint.mp4" type="video/mp4"/></video></div>
<p>接近傳感器、電機和輪子</p>
<script>
var winkVideoData_40923154 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923154" height="630" muted="true" width="1008">
<source src="/downloads/泡泡球1.mp4" type="video/mp4"/></video></div>
<div class="winkVideoContainerClass"></div>
<script>
var winkVideoData_40923155 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923155" height="630" muted="true" width="1008">
<source src="/downloads/泡泡球字幕版.mp4" type="video/mp4"/></video></div>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/GfuRt2H0HQ4" title="YouTube video player" width="560"></iframe></p>
<h2>Lua</h2>
<p>盡可能理解程式碼，便於未來製作專案</p>
<p><img alt="" height="197" src="/images/sysCall_vision.png" width="1217"/><span style="color: #0000ff;">sysCall_vision(inData)</span> 函數傳入一個名為 inData 的參數，用來處理視覺相關的資料。</p>
<p>在函數內部，程式碼使用 simVision 模組提供的函數來處理視覺相關的操作，<span style="color: #0000ff;">sensorImgToWorkingImg</span> 將視覺傳感器的圖像複製到工作圖像中，<span style="color: #0000ff;">edgeDetectionOnWorking</span> 對工作圖像執行邊緣檢測，<span style="color: #0000ff;">workImgToSensorImg</span> 將工作圖像複製回視覺傳感器圖像緩衝區中。</p>
<p><span style="color: #0000ff;">sysCall_init()</span><span> 函數是初始化函數，當程式啟動時會自動執行。但此函數目前內部為空，沒有任何操作。</span></p>
<p><span>另外在 CoppeliaSim 中，每個場景中的物體都有一個唯一的識別符號，稱為 "句柄 <span style="color: #0000ff;">handle</span>"。handle 在計算機編程中是常用的術語，為一個整數，可以用來識別不同的物體或場景中的元件。</span></p>
<p><span style="background-color: #ffff00;">為了處理 CoppeliaSim 中的視覺感測器的操作，並在程式初始化時執行。</span></p>
<p><img alt="" height="96" src="/images/speedChange_callback.png" width="962"/></p>
<p><span style="color: #0000ff;">speedChange_callback</span><span> 的函數定義了當 ui 中相應的控制元件的值發生改變時，會自動執行此函數。該函數會接收三個參數：</span></p>
<ol>
<li><span><span style="color: #0000ff;">ui</span> 表示當前 ui 界面的狀態和控制元件的屬性，可以通過它來獲取相關的資訊。</span></li>
<li><span style="color: #0000ff;">id <span style="color: #000000;">表示控制元件的 id，可以通過它來判斷是哪個控制元件發生了值的改變。</span></span></li>
<li><span style="color: #0000ff;">newVal <span style="color: #000000;">表示控制元件的新值，即使用者設置的新值。</span></span><span style="color: #0000ff;"><span style="color: #000000;"></span></span></li>
</ol>
<p><span style="color: #0000ff;"><span style="color: #000000;"><span>在函數內部，程式碼會使用一個數組 minMaxSpeed 計算新的速度值<span>，其中 </span><span style="color: #0000ff;">minMaxSpeed[1]</span><span> 表示速度的最小值，</span><span style="color: #0000ff;">minMaxSpeed[2]</span><span> 表示速度的最大值。然後根據控制元件的新值 </span>newVal<span>，通過簡單的線性插值計算出新的速度值，並將其存儲在 </span>speed<span> 變數中。</span></span></span></span></p>
<p><span style="color: #0000ff; background-color: #ffff00;"><span style="color: #000000;">用於根據 ui 中的控制元件值的改變，動態調整程式中的速度變數。</span></span></p>
<p><img alt="" height="508" src="/images/sysCall_init.png" width="1431"/></p>
<p><span style="color: #0000ff;">sysCall_init()</span><span> 函數執行於模擬場景開始運行時，</span><span class="Y2IQFc" lang="zh-TW">只執行一次，且是第一次執行這個腳本。</span></p>
<p><span class="Y2IQFc" lang="zh-TW"><span>通過 </span><span style="color: #0000ff;">sim.getObject()</span><span> 函數獲取 BubbleRob 模型的不同元件的句柄，並且將它們存儲到相應的變量中。</span></span></p>
<p><span style="color: #0000ff;">bubbleRobBase=sim.getObject('.')</span> 獲取 BubbleRob 模型的基座物件的句柄，即 BubbleRob 的根物件。</p>
<p><span style="color: #0000ff;">leftMotor=sim.getObject("./leftMotor")</span> 獲取 BubbleRob 模型中左側馬達的句柄。</p>
<p><span style="color: #0000ff;">rightMotor=sim.getObject("./rightMotor")</span> 獲取 BubbleRob 模型中右側馬達的句柄。</p>
<p><span style="color: #0000ff;">noseSensor=sim.getObject("./sensingNose")</span> 獲取 BubbleRob 模型中前方傳感器的句柄。</p>
<p><span style="background-color: #ffff00;">獲取物件句柄可以讓我們在後續的程式碼中控制 BubbleRob 模型的運動。</span></p>
<p></p><h1>pj1</h1>
<p>1.繪製球場</p>
<script>
var winkVideoData_40923151 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923151" height="630" muted="true" width="1008">
<source src="/downloads/球場繪製.mp4" type="video/mp4"/></video></div>
<div class="winkVideoContainerClass"><a href="/downloads/球場.SLDPRT">球場.SLDPRT</a>  <a href="/downloads/球場.STL">球場.STL</a></div>
<div class="winkVideoContainerClass"></div>
<div class="winkVideoContainerClass"></div>
<div class="winkVideoContainerClass"></div>
<div class="winkVideoContainerClass">2.加入感測器</div>
<script>
var winkVideoData_40923152 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923152" height="630" muted="true" width="1008">
<source src="/downloads/加入感測器.mp4" type="video/mp4"/></video></div><h2>w6</h2>
<p>已<span>完成連線的分組</span></p>
<p>ag1</p>
<p>ag2</p>
<p>ag5</p>
<p>ag6</p>
<p>ag7</p>
<p>ag8</p>
<p>ag9</p>
<p>ag10</p>
<p>ag11</p>
<p>ag12</p>
<p>ag13</p>
<p>ag14</p>
<p>ag15</p>
<p>ag16</p>
<p>ag17</p>
<p>ag18</p>
<p>ag21</p>
<p><span>未完成連線的分組組員學號</span></p>
<p><span>ag3-41023108 41023110</span></p>
<p><span>ag4-41023125 41023128</span></p>
<p><span>ag19-41023101 41023141</span></p>
<p><span>ag20-41023105 41023109</span></p>
<p><span></span></p>
<p></p><h1>Tcexam</h1>
<p>2a_w6-與 cd2023 課程有關的敘述</p>
<p><strong>T：</strong>cd2023 課程的 team code 為: 2q56a7l</p>
<p><strong>F：</strong>cd2023 的主要課程目標是建一個六軸機械臂的模擬場景</p>
<p>(更正)<span>主要課程目標是</span><span>開發一款能在 web-based CoppeliaSim 場景中雙方或多方對玩的遊戲產品</span></p>
<p><strong>F：</strong>有關 cd2023 bubbleRob 場景製作練習 child script, bubbleRobBase=sim.getObject('.') 其中的 '.' 表示要取出所有場景中的物件</p>
<p>(更正)<span>這行程式碼僅會獲取模型的根物體的句柄。根物體是代表機器人的物體。</span></p>
<p><strong>T：</strong>cd2023 專案一中有關 CoppeliaSim 所製作的練習場景 robot 名稱為 bubbleRob</p>
<p><strong>T：</strong>cd2023 中的第一個作業的倉儲名稱為 "resume-" 然後加上個人的 github 帳號</p>
<p></p>
<p></p>
<p>Question：</p>
<p>stud2 是一台 Ubuntu server, 讓每一個用戶透過兩個 ports 共享 server  中所設置的外部與內部 ports.</p>
<p>Answer：</p>
<p>T)其中以 9 開頭的 port 設定為內部 port,  而 8 開頭的 port 則用於外部連線</p>
<p>F)<span>其中以 8 開頭的 port 設定為內部 port,  而 9 開頭的 port 則用於外部連線</span></p><h1>協同設計</h1>
<p><strong>要點：</strong></p>
<ol>
<li>參與協同者能否<span style="background-color: #ffff99;">同步並發</span>執行所被交付的內容</li>
<li>能否保留每一個階段所從事的設計版本</li>
<li>能否確認哪一階段的哪一事項是由哪位成員所完成 (可居功而且無法諉過)</li>
<li>了解採用不同設計流程的原因，目的與所可能遭遇的問題，讓協同者可在逐步改版過程接近預設目標</li>
</ol>
<p><strong>工作分配：</strong></p>
<p>呂佳柔41023104：建立靜態，維護動態</p>
<p>王啟騰41023112：拍攝wink，專案規劃</p>
<h1>專案規劃</h1>
<ul style="list-style-type: disc;">
<li>需求分析：了解系統的功能需求和使用者需求，進行系統需求分析和使用者調查。</li>
<li>設計規劃：基於需求分析，設計系統的整體架構、介面和功能。制定技術規格，選擇技術框架、編程語言等。</li>
<li>程式開發：根據設計規劃，進行編程、測試、調試等相關工作。同時，確保程式代碼的品質和穩定性。</li>
<li>整合測試：將各個模塊整合測試，保證整個系統的穩定性、可用性和可靠性。</li>
<li>上線部署：將系統部署到正式環境中，確保系統能夠正常運行。此外，確保系統的性能、安全和穩定性。</li>
<li>維護與更新：為了確保系統的可靠性和穩定性，需要定期進行系統的維護和更新。這包括更新程式代碼、更新資料庫、修復錯誤和漏洞等。</li>
</ul>
<div style="position: relative; width: 100%; height: 0; padding-top: 56.2500%; padding-bottom: 0; box-shadow: 0 2px 8px 0 rgba(63,69,81,0.16); margin-top: 1.6em; margin-bottom: 0.9em; overflow: hidden; border-radius: 8px; will-change: transform;"><iframe allow="fullscreen" allowfullscreen="allowfullscreen" height="150" loading="lazy" src="https://www.canva.com/design/DAFdCFw5jUo/view?embed" style="position: absolute; width: 100%; height: 100%; top: 0; left: 0; border: none; padding: 0; margin: 0;" width="300"></iframe></div>